# -*- coding: utf-8 -*-
from time import sleep

# Form implementation generated from reading ui file 'd:\code\python\Outsourcing\captcha\predict.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import QtCore, QtGui, QtWidgets
from utils import Utils


class Ui_Predict(object):
    # path= "/CNN"
    img_path=""
    util=None
    pred=''


    def __init__(self):
        self.util=Utils()


    def setupUi(self, Index):
        Index.setObjectName("Index")
        Index.resize(465, 419)
        self.menubar = self.menuBar()
        # 添加菜单
        self.predict_menu = self.menubar.addMenu(u'菜单')
        self.predict_action = QAction(u'预测记录', self)
        self.introduction_action = QAction(u'介绍', self)

        self.label = QtWidgets.QLabel(Index)
        self.label.setGeometry(QtCore.QRect(40, 30, 91, 31))
        self.label.setStyleSheet("\n"
"font: 12pt \"Adobe 黑体 Std R\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Index)
        self.label_2.setGeometry(QtCore.QRect(280, 30, 91, 31))
        self.label_2.setStyleSheet("\n"
"font: 12pt \"Adobe 黑体 Std R\";")
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(Index)
        self.comboBox.setGeometry(QtCore.QRect(320, 30, 121, 22))
        self.comboBox.setObjectName("comboBox")


        self.comboBox_2 = QtWidgets.QComboBox(Index)
        self.comboBox_2.setGeometry(QtCore.QRect(130, 30, 131, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.currentIndexChanged.connect(self.select_model_2)

        self.tableWidget = QtWidgets.QTableWidget(Index)
        self.tableWidget.setGeometry(QtCore.QRect(90, 70, 291, 281))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.graphicsView = QtWidgets.QGraphicsView(Index)
        self.graphicsView.setGeometry(QtCore.QRect(90, 70, 291, 121))
        self.graphicsView.setObjectName("graphicsView")
        self.label_3 = QtWidgets.QLabel(Index)
        self.label_3.setGeometry(QtCore.QRect(130, 210, 71, 16))
        self.label_3.setStyleSheet("font: 12pt \"Adobe 黑体 Std R\";")
        self.label_3.setObjectName("label_3")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(Index)
        self.plainTextEdit.setGeometry(QtCore.QRect(210, 210, 161, 21))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setReadOnly(True)

        self.pushButton = QtWidgets.QPushButton(Index)
        self.pushButton.setGeometry(QtCore.QRect(140, 260, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.load)
        
        self.pushButton_2 = QtWidgets.QPushButton(Index)
        self.pushButton_2.setGeometry(QtCore.QRect(280, 260, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.predict)
        
        self.pushButton_3 = QtWidgets.QPushButton(Index)
        self.pushButton_3.setGeometry(QtCore.QRect(140, 300, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Index)
        self.pushButton_4.setGeometry(QtCore.QRect(280, 300, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")

        self.retranslateUi(Index)
        QtCore.QMetaObject.connectSlotsByName(Index)

    def retranslateUi(self, Index):
        _translate = QtCore.QCoreApplication.translate
        Index.setWindowTitle(_translate("Index", "模型预测"))
        self.label.setText(_translate("Index", "验证码类型"))
        self.label_2.setText(_translate("Index", "模型"))
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.setItemText(0, "CNN")
        self.comboBox.setItemText(1, "CNN-GRU")
        self.comboBox.currentIndexChanged.connect(self.select_model)

        self.comboBox_2.setItemText(0, _translate("Index", "英文验证码"))
        self.comboBox_2.setItemText(1, _translate("Index", "点选验证码"))
        self.comboBox_2.setItemText(2,_translate("Index", "缺口验证码"))
        self.comboBox_2.setItemText(3,_translate("Index", "手势验证码"))

        self.label_3.setText(_translate("Index", "预测结果"))
        self.pushButton.setText(_translate("Index", "加载"))
        self.pushButton_2.setText(_translate("Index", "预测"))
        self.pushButton_3.setText(_translate("Index", "保存"))
        # self.pushButton_3.clicked.connect(self.save)
        self.pushButton_4.setText(_translate("Index", "退出"))

    def load(self):
        try:

            self.select_path()
            print("加载成功")
            print(self.img_path)
            # self.plainTextEdit.setPlainText("")
            # self.graphicsView.setScene()
            # 在该目录下选择一个图像文件  
            file_dialog = QFileDialog.getOpenFileName(self, "选择图片文件", self.path, "Image Files (*.bmp *.png *.jpg)")
            
            # 检查是否选择了文件  
            if file_dialog[0]:  
                # 加载图片到QPixmap  
                pixmap = QPixmap(file_dialog[0])  
                pixmap_item = QGraphicsPixmapItem(pixmap)  
                self.img_path = file_dialog[0]

                # 计算缩放比例
                view_width = self.graphicsView.width()
                view_height = self.graphicsView.height()
                pixmap_ratio = pixmap.width() / pixmap.height()
                view_ratio = view_width / view_height
                if pixmap_ratio > view_ratio:
                    scale_factor = view_width / pixmap.width()
                else:
                    scale_factor = view_height / pixmap.height()

                pixmap_item.setScale(scale_factor)

                self.scene = QGraphicsScene()
                self.scene.addItem(pixmap_item)
                self.graphicsView.setScene(self.scene)

            else:  
                # 用户取消操作或没有选择文件  
                print("没有选择文件")
                self.plainTextEdit.setPlainText("")
                if self.graphicsView.scene():
                    self.graphicsView.scene().clear()
                else:
                    self.graphicsView.setScene(QGraphicsScene())  # 创建新的空场
                msg=QMessageBox(QMessageBox.Warning,"警告","没有选择文件")
                msg.exec_()
        except Exception as e:
            print("发生错误:",e)

    def predict(self):
        # self.plainTextEdit.setPlainText("")
        print(self.comboBox_2.currentText(), self.comboBox.currentText())
        print(self.img_path)
        # if self.img_path == None:
        #     print("没有选择文件")
        #     self.plainTextEdit.setPlainText("")
        #     if self.graphicsView.scene():
        #         self.graphicsView.scene().clear()
        #     else:
        #         self.graphicsView.setScene(QGraphicsScene())  # 创建新的空场
        #     msg=QMessageBox(QMessageBox.Warning,"警告","没有选择文件")
        #     msg.exec_()

        if self.img_path:
            if self.comboBox_2.currentText() == "英文验证码" and self.comboBox.currentText() == "CNN-GRU":
                print("predict")
                print(self.img_path)
                self.pred = self.util.CNN_GRU(self.img_path)
                print(self.pred)
                self.plainTextEdit.setPlainText(self.pred)
            elif self.comboBox_2.currentText() == "英文验证码" and self.comboBox.currentText() == "CNN":
                self.pred = self.util.CNN(self.img_path)
                self.plainTextEdit.setPlainText(self.pred)
            elif self.comboBox_2.currentText() == "点选验证码":
                self.pred, img = self.util.YOLO_CLICK(self.img_path)
                self.pred="D:\\code\\python\\Outsourcing\\captcha\\CLICK_CAPTCHA\\result.png"
                # print(res)
                # # 处理 res 列表
                # processed_res = []
                # for item in res:
                #     numbers = self.extract_numbers_from_tensor_string(item)
                #     processed_res.append(numbers)
                # self.pred = str(processed_res)  # 将处理后的结果转换为字符串
                print(self.pred)
                self.plainTextEdit.setPlainText(self.pred)
                if img:
                    pixmap = QPixmap(img)
                    pixmap_item = QGraphicsPixmapItem(pixmap)

                    # 计算缩放比例
                    view_width = self.graphicsView.width()
                    view_height = self.graphicsView.height()
                    pixmap_ratio = pixmap.width() / pixmap.height()
                    view_ratio = view_width / view_height
                    scale_factor = view_width / pixmap.width() if pixmap_ratio > view_ratio else view_height / pixmap.height()

                    pixmap_item.setScale(scale_factor)

                    # 更新图像视图
                    self.scene = QGraphicsScene()
                    self.scene.addItem(pixmap_item)
                    self.graphicsView.setScene(self.scene)
            elif self.comboBox_2.currentText() == "手势验证码":
                self.util.getInfo(self.img_path)
                self.pred = 'D:\\code\\python\\Outsourcing\\captcha\\GESTURE\\result.png'
                self.plainTextEdit.setPlainText('手势验证码')
                img = "D:\\code\\python\\Outsourcing\\captcha\\GESTURE\\result.png"
                if img:
                    pixmap = QPixmap(img)
                    pixmap_item = QGraphicsPixmapItem(pixmap)
                    print("terst")
                    # 计算缩放比例
                    view_width = self.graphicsView.width()
                    view_height = self.graphicsView.height()
                    pixmap_ratio = pixmap.width() / pixmap.height()
                    view_ratio = view_width / view_height
                    scale_factor = view_width / pixmap.width() if pixmap_ratio > view_ratio else view_height / pixmap.height()

                    pixmap_item.setScale(scale_factor)

                    # 更新图像视图
                    self.scene = QGraphicsScene()
                    self.scene.addItem(pixmap_item)
                    self.graphicsView.setScene(self.scene)
            else:
                self.pred, img = self.util.YOLO_DRAG(self.img_path)
                self.pred="D:\\code\\python\\Outsourcing\\captcha\\QK_CAPTCHA\\result.png"
                # 处理 res 列表
                # processed_res = []
                # for item in res:
                #     numbers = self.extract_numbers_from_tensor_string(item)
                #     processed_res.append(numbers)
                # self.pred = str(processed_res)  # 将处理后的结果转换为字符串
                print(self.pred)
                sleep(1)
                self.plainTextEdit.setPlainText(self.pred)
                if img:
                    pixmap = QPixmap(img)
                    pixmap_item = QGraphicsPixmapItem(pixmap)

                    # 计算缩放比例
                    view_width = self.graphicsView.width()
                    view_height = self.graphicsView.height()
                    pixmap_ratio = pixmap.width() / pixmap.height()
                    view_ratio = view_width / view_height
                    scale_factor = view_width / pixmap.width() if pixmap_ratio > view_ratio else view_height / pixmap.height()

                    pixmap_item.setScale(scale_factor)

                    # 更新图像视图
                    self.scene = QGraphicsScene()
                    self.scene.addItem(pixmap_item)
                    self.graphicsView.setScene(self.scene)
        else:
            msg = QMessageBox(QMessageBox.Warning, "警告", "没有选择文件")
            msg.exec_()
        # self.util.save(111111,self.comboBox_2,self.comboBox,pred)

        # self.util.save(111111,self.comboBox_2,self.comboBox,pred)
    def save(self,username):
        print(self.pred)
        if self.pred=='' or self.comboBox.currentText()=='' or self.comboBox_2.currentText()=='':
            print(self.pred,self.comboBox.currentText(),self.comboBox_2.currentText())
            msg = QMessageBox(QMessageBox.Warning, "警告", "请先进行验证码预测")
            msg.exec_()
        else:
            self.util.save(username,self.comboBox_2.currentText(),self.comboBox.currentText(),self.pred)


    def select_model(self):
        try:
            self.plainTextEdit.setPlainText(" ")
            if self.graphicsView.scene():
                self.graphicsView.scene().clear()
            else:
                self.graphicsView.setScene(QGraphicsScene())  # 创建新的空场
            if self.comboBox_2.currentText()=="英文验证码":
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.setItemText(0, "CNN")
                self.comboBox.setItemText(1, "CNN-GRU")
            elif self.comboBox_2.currentText()=="点选验证码":
                self.comboBox.addItem("")
                self.comboBox.setItemText(0, "YOLOV11")
                # self.comboBox.setItemText(1,"")
            elif self.comboBox_2.currentText() == "缺口验证码":
                self.comboBox.addItem("")
                self.comboBox.setItemText(0, "YOLOV11")
                # self.comboBox.setItemText(1, "")
            elif self.comboBox_2.currentText() == "手势验证码":
                self.comboBox.addItem("")
                self.comboBox.setItemText(0, "UNet")
                # self.comboBox.setItemText(1, "")
        except Exception as e:
            print(e)

    def select_model_2(self):
        self.plainTextEdit.setPlainText(" ")
        if self.graphicsView.scene():
            self.graphicsView.scene().clear()
        else:
            self.graphicsView.setScene(QGraphicsScene())  # 创建新的空场

        # 根据comboBox_2的选项更新comboBox的内容
        if self.comboBox_2.currentText() == "英文验证码":
            self.comboBox.clear()  # 清除现有的项目
            self.comboBox.addItem("CNN")
            self.comboBox.addItem("CNN-GRU")
        elif self.comboBox_2.currentText() == "点选验证码":
            self.comboBox.clear()
            self.comboBox.addItem("YOLOV11")
        elif self.comboBox_2.currentText() == "缺口验证码":
            self.comboBox.clear()
            self.comboBox.addItem("YOLOV11")
        elif self.comboBox_2.currentText() == "手势验证码":
            self.comboBox.clear()
            self.comboBox.addItem("UNet")


    def select_path(self):
        if self.comboBox_2.currentText() == "英文验证码" and self.comboBox.currentText() == "CNN-GRU":
            self.path = "D:\\code\\python\\Outsourcing\\captcha\\CNN_GRU"
        elif self.comboBox_2.currentText() == "点选验证码":
            self.path = "D:\\code\\python\\Outsourcing\\captcha\\CLICK_CAPTCHA"
        elif self.comboBox_2.currentText() == "缺口验证码":
            self.path = "D:\\code\\python\\Outsourcing\\captcha\\QK_CAPTCHA"
        elif self.comboBox_2.currentText() == "英文验证码" and self.comboBox.currentText() == "CNN":
            self.path= "D:\\code\\python\\Outsourcing\\captcha\\CNN"
        elif self.comboBox_2.currentText() == "手势验证码":
            self.path = "D:\\code\\python\\Outsourcing\\captcha\\GESTURE"


