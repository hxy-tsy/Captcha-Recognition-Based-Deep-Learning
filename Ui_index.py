# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\code\python\Outsourcing\captcha\index.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(592, 577)
        self.menubar = self.menuBar()
        # 添加菜单
        self.about_menu = self.menubar.addMenu(u'关于')
        self.manage_action = QAction(u'修改密码', self)
        self.exit_acction = QAction('退出', self)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # 创建 PlainTextEdit 并设置为只读
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(60, 20, 461, 471))
        self.plainTextEdit.setStyleSheet("font: 25 12pt \"Adobe 宋体 Std L\";")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setReadOnly(True)  # 设置文本框为只读

        # 创建按钮
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(200, 500, 91, 31))
        self.pushButton.setObjectName("pushButton")

        # 创建头像组件
        self.avatarLabel = QtWidgets.QLabel(self.centralwidget)
        self.avatarLabel.setGeometry(QtCore.QRect(480, 10, 100, 100))  # 设置头像大小及位置
        self.avatarLabel.setPixmap(QtGui.QPixmap("avatar.png"))  # 替换为实际的头像图片路径
        self.avatarLabel.setScaledContents(True)  # 设置图片按控件大小缩放
        self.avatarLabel.setAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignRight)  # 右上角对齐

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "首页"))
        self.plainTextEdit.setPlainText(_translate("MainWindow",
                                                   "           随着互联网的快速发展，网站验证码作为一种重要的安全防护措施，被广泛应用于用户注册、登录、评论等环节，以防止恶意注册、刷票、攻击等行为。传统的验证码识别方法，如光学字符识别（OCR）和规则匹配，在面对复杂、多变的验证码类型时，识别准确率较低，难以满足实际应用需求。近年来，深度学习技术的发展为验证码识别提供了新的思路。基于深度学习的验证码识别系统，能够有效识别各种类型的验证码，具有识别准确率高、泛化能力强等优点，成为该领域的研究热点。\n"
                                                   "          在国外，深度学习技术在验证码识别领域的研究起步较早，已经取得了显著的研究成果。许多研究团队利用卷积神经网络（CNN）和循环神经网络（RNN）等深度学习模型，对验证码图像进行特征提取和分类，实现了高精度的识别效果。有研究利用CNN对字符型验证码进行识别，通过大量的训练数据优化模型参数，取得了较高的识别准确率。还有研究将RNN应用于验证码识别中，利用其处理序列数据的优势，提高了对复杂验证码的识别能力。\n"
                                                   "           在国内，深度学习技术在验证码识别领域的研究也逐渐兴起。许多学者和科研机构致力于将深度学习技术应用于验证码识别系统中，以提高识别准确率和系统性能。一些研究团队利用深度学习框架（如TensorFlow、PyTorch等）搭建验证码识别模型，并通过优化模型结构和参数，取得了良好的识别效果。同时，还有一些研究将深度学习技术与其他图像处理技术相结合，进一步提高了验证码识别的准确性和鲁棒性。\n"
                                                   ""))
        self.pushButton.setText(_translate("MainWindow", "确定"))
