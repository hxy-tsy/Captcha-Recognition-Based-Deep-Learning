# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\code\python\Outsourcing\captcha\login.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\code\python\Outsourcing\captcha\login.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import pymysql
from utils import *


class Ui_Login(object):
    util=Utils()

    def setupUi(self, Login):
        Login.setObjectName("Login")
        Login.resize(677, 508)
        self.label_2 = QtWidgets.QLabel(Login)
        self.label_2.setGeometry(QtCore.QRect(180, 190, 121, 51))
        self.label_2.setStyleSheet("font: 16pt \"Adobe Heiti Std\";")
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(Login)
        self.lineEdit.setGeometry(QtCore.QRect(280, 200, 221, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Login)
        self.label_3.setGeometry(QtCore.QRect(180, 240, 121, 51))
        self.label_3.setStyleSheet("font: 16pt \"Adobe Heiti Std\";")
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(Login)
        self.lineEdit_2.setGeometry(QtCore.QRect(280, 250, 221, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setEchoMode(QLineEdit.Password)
        self.pushButton = QtWidgets.QPushButton(Login)
        self.pushButton.setGeometry(QtCore.QRect(290, 320, 75, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Login)
        self.pushButton_2.setGeometry(QtCore.QRect(410, 320, 75, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        # self.pushButton_2.clicked.connect(self.register)

        self.retranslateUi(Login)
        QtCore.QMetaObject.connectSlotsByName(Login)

    def retranslateUi(self, Login):
        _translate = QtCore.QCoreApplication.translate
        Login.setWindowTitle(_translate("Login", "Login"))
        self.label_2.setText(_translate("Login", "账号"))
        self.label_3.setText(_translate("Login", "密码"))
        self.pushButton.setText(_translate("Login", "登录"))
        self.pushButton_2.setText(_translate("Login", "注册"))

    # def register(self):
    #     # self.pushButton.setText("注册")
    #     # self.pushButton_2.setText("返回")
    #     username = self.lineEdit.text()
    #     password = self.lineEdit_2.text()
    #     if self.check_password_strength(password) == False:
    #         msg = QMessageBox(QMessageBox.Warning, "警告",
    #                           "密码过于简单，密码不能少于8位且必须包含字母、数字、特殊字符三种类型")
    #         msg.exec_()
    #     else:
    #         # pwd=hashlib.md5(password.encode('utf-8')).hexdigest()
    #         pwd = util.encrypt_data(password)
    #         print(pwd)
    #         try:
    #             db = pymysql.connect(host='localhost', user='root', password='root', database='mysql')
    #             # 创建一个新的数据库游标对象 cursor
    #             cursor = db.cursor()
    #             sql = "insert into captcha_user(username,password)values(%s,%s);"
    #             print("注册成功")
    #             cursor.execute(sql, (username, pwd))  # 新用户积分为0
    #             db.commit()
    #             db.close()
    #             self.sign.emit("注册成功")
    #             msg_box = QMessageBox(QMessageBox.Information, '成功', '注册成功')
    #             msg_box.exec_()
    #         except Exception as e:
    #             msg_box = QMessageBox(QMessageBox.Critical, '错误', '账号已存在')
    #             msg_box.exec_()
    #             print("注册失败", e)
    #
    # def check_password_strength(self, password):
    #     # 定义正则表达式模式
    #     has_letter = re.compile(r'[a-zA-Z]')
    #     has_digit = re.compile(r'\d')
    #     has_special_char = re.compile(r'[!@#$%^&*()]')
    #
    #     # 检查密码是否满足每个条件
    #     if has_letter.search(password) and has_digit.search(password) and has_special_char.search(password) and len(
    #             password) >= 8:
    #         return True
    #     else:
    #         return False
    #
    # def login(self):
    #     username = self.lineEdit.text()
    #     password = self.lineEdit_2.text()
    #     # pwd=hashlib.md5(password.encode('utf-8')).hexdigest()
    #     try:
    #         db = pymysql.connect(host='localhost', user='root', password='root', database='mysql')
    #         # 创建一个新的数据库游标对象 cursor
    #         cursor = db.cursor()
    #         sql = "SELECT password FROM captcha_user where username=%s;"
    #         cursor.execute(sql, (username,))
    #         pas = cursor.fetchone()
    #         decryt_pas = util.decrypt_data(pas[0])
    #         print(pas[0])
    #         self.mainwindow1 = main_ui1()
    #
    #         if decryt_pas == password:
    #             self.sign.emit("登陆成功")
    #             self.mainwindow1.show()
    #             self.mainwindow1.exit_acction.triggered.connect(self.mainwindow1.close)
    #             self.mainwindow1.exit_acction.triggered.connect(mainwindow.show)
    #             self.mainwindow1.about_menu.addAction(self.mainwindow1.exit_acction)
    #             mainwindow.close()